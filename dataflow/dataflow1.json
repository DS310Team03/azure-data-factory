{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Parquet3",
						"type": "DatasetReference"
					},
					"name": "Countryazuresql"
				},
				{
					"dataset": {
						"referenceName": "Parquet3",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "Parquet4",
						"type": "DatasetReference"
					},
					"name": "metricsazuresql"
				},
				{
					"dataset": {
						"referenceName": "Parquet5",
						"type": "DatasetReference"
					},
					"name": "metricsonprem"
				},
				{
					"dataset": {
						"referenceName": "Parquet6",
						"type": "DatasetReference"
					},
					"name": "datesazuresql"
				},
				{
					"dataset": {
						"referenceName": "Parquet7",
						"type": "DatasetReference"
					},
					"name": "datesonprem"
				},
				{
					"dataset": {
						"referenceName": "Json3",
						"type": "DatasetReference"
					},
					"name": "policyjson"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Parquet8",
						"type": "DatasetReference"
					},
					"name": "Recoveries2"
				},
				{
					"dataset": {
						"referenceName": "Parquet9",
						"type": "DatasetReference"
					},
					"name": "Dates2"
				},
				{
					"dataset": {
						"referenceName": "Parquet10",
						"type": "DatasetReference"
					},
					"name": "Geography2"
				},
				{
					"dataset": {
						"referenceName": "Parquet11",
						"type": "DatasetReference"
					},
					"name": "Cases2"
				},
				{
					"dataset": {
						"referenceName": "Parquet12",
						"type": "DatasetReference"
					},
					"name": "Policies2",
					"rejectedDataLinkedService": {
						"referenceName": "AzureBlobStorage1",
						"type": "LinkedServiceReference"
					}
				},
				{
					"dataset": {
						"referenceName": "Parquet13",
						"type": "DatasetReference"
					},
					"name": "Deaths2"
				}
			],
			"transformations": [
				{
					"name": "union1"
				},
				{
					"name": "union2"
				},
				{
					"name": "union3"
				},
				{
					"name": "join1"
				},
				{
					"name": "join2"
				},
				{
					"name": "join3"
				},
				{
					"name": "cast1"
				},
				{
					"name": "Cases"
				},
				{
					"name": "Deaths"
				},
				{
					"name": "Recoveries"
				},
				{
					"name": "Policies"
				},
				{
					"name": "Geography"
				},
				{
					"name": "Dates"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Country as string,",
				"          CountryCode as string,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> Countryazuresql",
				"source(output(",
				"          Country as string,",
				"          CountryCode as string,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> source2",
				"source(output(",
				"          ID as integer,",
				"          Updated as date,",
				"          Confirmed as integer,",
				"          Confirmed_Change as integer,",
				"          Deaths as integer,",
				"          Deaths_Change as integer,",
				"          Recovered as integer,",
				"          Recovered_Change as integer,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5),",
				"          ISO2 as string,",
				"          ISO3 as string,",
				"          Country_Region as string,",
				"          load_time as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> metricsazuresql",
				"source(output(",
				"          ID as integer,",
				"          Updated as date,",
				"          Confirmed as integer,",
				"          Confirmed_Change as integer,",
				"          Deaths as integer,",
				"          Deaths_Change as integer,",
				"          Recovered as integer,",
				"          Recovered_Change as integer,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5),",
				"          ISO2 as string,",
				"          ISO3 as string,",
				"          Country_Region as string,",
				"          load_time as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> metricsonprem",
				"source(output(",
				"          DateKey as integer,",
				"          FullDate as date,",
				"          isWeekDay as boolean,",
				"          DayOfWeek as integer,",
				"          DayOfMonth as integer,",
				"          DayOfQuarter as integer,",
				"          DayOfYear as integer,",
				"          DayName as string,",
				"          WeekOfYear as integer,",
				"          WeekName as string,",
				"          MonthOfYear as integer,",
				"          MonthName as string,",
				"          CalendarQuarter as integer,",
				"          CalendarQuarterName as string,",
				"          CalendarYear as integer,",
				"          FiscalMonth as integer,",
				"          FiscalMonthName as string,",
				"          FiscalQuarter as integer,",
				"          FiscalQuarterName as string,",
				"          FiscalYear as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> datesazuresql",
				"source(output(",
				"          DateKey as integer,",
				"          FullDate as date,",
				"          isWeekDay as boolean,",
				"          DayOfWeek as integer,",
				"          DayOfMonth as integer,",
				"          DayOfQuarter as integer,",
				"          DayOfYear as integer,",
				"          DayName as string,",
				"          WeekOfYear as integer,",
				"          WeekName as string,",
				"          MonthOfYear as integer,",
				"          MonthName as string,",
				"          CalendarQuarter as integer,",
				"          CalendarQuarterName as string,",
				"          CalendarYear as integer,",
				"          FiscalMonth as integer,",
				"          FiscalMonthName as string,",
				"          FiscalQuarter as integer,",
				"          FiscalQuarterName as string,",
				"          FiscalYear as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> datesonprem",
				"source(output(",
				"          CountryName as string,",
				"          CountryCode as string,",
				"          RegionName as string,",
				"          RegionCode as string,",
				"          Jurisdiction as string,",
				"          Date as string,",
				"          {C1_School closing} as integer,",
				"          C1_Flag as integer,",
				"          {C2_Workplace closing} as integer,",
				"          C2_Flag as integer,",
				"          {C3_Cancel public events} as integer,",
				"          C3_Flag as integer,",
				"          {C4_Restrictions on gatherings} as integer,",
				"          C4_Flag as integer,",
				"          {C5_Close public transport} as integer,",
				"          C5_Flag as integer,",
				"          {C6_Stay at home requirements} as integer,",
				"          C6_Flag as integer,",
				"          {C7_Restrictions on internal movement} as integer,",
				"          C7_Flag as integer,",
				"          {C8_International travel controls} as integer,",
				"          {E1_Income support} as integer,",
				"          E1_Flag as integer,",
				"          {E2_Debt contract relief} as integer,",
				"          {E3_Fiscal measures} as integer,",
				"          {E4_International support} as integer,",
				"          {H1_Public information campaigns} as integer,",
				"          H1_Flag as integer,",
				"          {H2_Testing policy} as integer,",
				"          {H3_Contact tracing} as integer,",
				"          {H4_Emergency investment in healthcare} as integer,",
				"          {H5_Investment in vaccines} as integer,",
				"          {H6_Facial Coverings} as integer,",
				"          H6_Flag as integer,",
				"          {H7_Vaccination policy} as integer,",
				"          H7_Flag as integer,",
				"          {H8_Protection of elderly people} as integer,",
				"          H8_Flag as integer,",
				"          M1_Wildcard as integer,",
				"          StringencyIndex as integer,",
				"          StringencyIndexForDisplay as integer,",
				"          StringencyLegacyIndex as integer,",
				"          StringencyLegacyIndexForDisplay as integer,",
				"          GovernmentResponseIndex as integer,",
				"          GovernmentResponseIndexForDisplay as integer,",
				"          ContainmentHealthIndex as integer,",
				"          ContainmentHealthIndexForDisplay as integer,",
				"          EconomicSupportIndex as integer,",
				"          EconomicSupportIndexForDisplay as integer,",
				"          id as string,",
				"          {_rid} as string,",
				"          {_self} as string,",
				"          {_etag} as string,",
				"          {_attachments} as string,",
				"          {_ts} as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> policyjson",
				"Countryazuresql, source2 union(byName: true)~> union1",
				"metricsazuresql, metricsonprem union(byName: true)~> union2",
				"datesazuresql, datesonprem union(byName: true)~> union3",
				"union2, union1 join(Country_Region == Country,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1, union3 join(Updated == FullDate,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2, cast1 join(Updated == Date",
				"     && Country_Region == CountryName,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3",
				"policyjson cast(output(",
				"          Date as date",
				"     ),",
				"     errors: true) ~> cast1",
				"join3 select(mapColumn(",
				"          ID = union2@ID,",
				"          Confirmed,",
				"          Confirmed_Change",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Cases",
				"join3 select(mapColumn(",
				"          ID = union2@ID,",
				"          Deaths,",
				"          Deaths_Change",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Deaths",
				"join3 select(mapColumn(",
				"          ID = union2@ID,",
				"          Recovered,",
				"          Recovered_Change",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Recoveries",
				"join3 select(mapColumn(",
				"          ID = union2@ID,",
				"          SchoolClosing = {C1_School closing},",
				"          SchoolClosingFlag = C1_Flag,",
				"          WorkplaceClosing = {C2_Workplace closing},",
				"          WorkplaceClosingFlag = C2_Flag,",
				"          CancelPublicEvents = {C3_Cancel public events},",
				"          CancelPublicEventsFlag = C3_Flag,",
				"          RestrictionsOnGatherings = {C4_Restrictions on gatherings},",
				"          RestrictionsOnGatheringsFlag = C4_Flag,",
				"          ClosePublicTransport = {C5_Close public transport},",
				"          ClosePublicTransportFlag = C5_Flag,",
				"          StayAtHomeRequirements = {C6_Stay at home requirements},",
				"          StayAtHomeRequirementsFlag = C6_Flag,",
				"          RestrictionsOnInternalMovement = {C7_Restrictions on internal movement},",
				"          RestrictionsOnInternalMovementFlag = C7_Flag,",
				"          InternationalTravelControls = {C8_International travel controls},",
				"          IncomeSupport = {E1_Income support},",
				"          DebtContractRelief = {E2_Debt contract relief},",
				"          FiscalMeasures = {E3_Fiscal measures},",
				"          InternationalSupport = {E4_International support},",
				"          PublicInformationCampaigns = {H1_Public information campaigns},",
				"          PublicInformationCampaignsFlag = H1_Flag,",
				"          TestingPolicy = {H2_Testing policy},",
				"          ContactTracing = {H3_Contact tracing},",
				"          EmergencyInvestmentInHealthcare = {H4_Emergency investment in healthcare},",
				"          InvestmentInVaccines = {H5_Investment in vaccines},",
				"          FacialCoverings = {H6_Facial Coverings},",
				"          FacialCoveringsFlag = H6_Flag,",
				"          VaccinationPolicy = {H7_Vaccination policy},",
				"          VaccinationPolicyFlag = H7_Flag,",
				"          ProtectionOfElderlyPeople = {H8_Protection of elderly people},",
				"          ProtectionOfElderlyPeopleFlag = H8_Flag,",
				"          StringencyIndex,",
				"          StringencyIndexForDisplay,",
				"          StringencyLegacyIndex,",
				"          StringencyLegacyIndexForDisplay,",
				"          GovernmentResponseIndex,",
				"          GovernmentResponseIndexForDisplay,",
				"          ContainmentHealthIndex,",
				"          ContainmentHealthIndexForDisplay,",
				"          EconomicSupportIndex,",
				"          EconomicSupportIndexForDisplay",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Policies",
				"join3 select(mapColumn(",
				"          ID = union2@ID,",
				"          Country_Region,",
				"          RegionCode,",
				"          Jurisdiction,",
				"          Latitude = union2@Latitude,",
				"          Longitude = union2@Longitude",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Geography",
				"join3 select(mapColumn(",
				"          ID = union2@ID,",
				"          Updated,",
				"          FullDate,",
				"          DateKey,",
				"          isWeekDay,",
				"          DayOfWeek,",
				"          DayOfMonth,",
				"          DayOfQuarter,",
				"          DayOfYear,",
				"          DayName,",
				"          WeekOfYear,",
				"          WeekName,",
				"          MonthOfYear,",
				"          MonthName,",
				"          CalendarQuarter,",
				"          CalendarQuarterName,",
				"          CalendarYear,",
				"          FiscalMonth,",
				"          FiscalMonthName,",
				"          FiscalQuarter,",
				"          FiscalQuarterName,",
				"          FiscalYear",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Dates",
				"Recoveries sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['recoveries.parquet'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          ID,",
				"          Recovered,",
				"          Recovered_Change",
				"     ),",
				"     partitionBy('hash', 1)) ~> Recoveries2",
				"Dates sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ID as integer,",
				"          Country_Region as string,",
				"          RegionCode as string,",
				"          Jurisdiction as string,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5)",
				"     ),",
				"     format: 'parquet',",
				"     partitionFileNames:['dates.parquet'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> Dates2",
				"Geography sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['geography.parquet'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          ID,",
				"          Country_Region,",
				"          RegionCode,",
				"          Jurisdiction,",
				"          Latitude,",
				"          Longitude",
				"     ),",
				"     partitionBy('hash', 1)) ~> Geography2",
				"Cases sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['cases.parquet'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> Cases2",
				"Policies sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['policies.parquet'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          ID,",
				"          SchoolClosing,",
				"          SchoolClosingFlag,",
				"          WorkplaceClosing,",
				"          WorkplaceClosingFlag,",
				"          CancelPublicEvents,",
				"          CancelPublicEventsFlag,",
				"          RestrictionsOnGatherings,",
				"          RestrictionsOnGatheringsFlag,",
				"          ClosePublicTransport,",
				"          ClosePublicTransportFlag,",
				"          StayAtHomeRequirements,",
				"          StayAtHomeRequirementsFlag,",
				"          RestrictionsOnInternalMovement,",
				"          RestrictionsOnInternalMovementFlag,",
				"          InternationalTravelControls,",
				"          IncomeSupport,",
				"          DebtContractRelief,",
				"          FiscalMeasures,",
				"          InternationalSupport,",
				"          PublicInformationCampaigns,",
				"          PublicInformationCampaignsFlag,",
				"          TestingPolicy,",
				"          ContactTracing,",
				"          EmergencyInvestmentInHealthcare,",
				"          InvestmentInVaccines,",
				"          FacialCoverings,",
				"          FacialCoveringsFlag,",
				"          VaccinationPolicy,",
				"          VaccinationPolicyFlag,",
				"          ProtectionOfElderlyPeople,",
				"          ProtectionOfElderlyPeopleFlag,",
				"          StringencyIndex,",
				"          StringencyIndexForDisplay,",
				"          StringencyLegacyIndex,",
				"          StringencyLegacyIndexForDisplay,",
				"          GovernmentResponseIndex,",
				"          GovernmentResponseIndexForDisplay,",
				"          ContainmentHealthIndex,",
				"          ContainmentHealthIndexForDisplay,",
				"          EconomicSupportIndex,",
				"          EconomicSupportIndexForDisplay",
				"     ),",
				"     partitionBy('hash', 1)) ~> Policies2",
				"Deaths sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['deaths.parquet'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          ID,",
				"          Deaths,",
				"          Deaths_Change",
				"     ),",
				"     partitionBy('hash', 1)) ~> Deaths2"
			]
		}
	}
}